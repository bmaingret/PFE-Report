
@article{lohmann_aspect-oriented_2008,
	title = {Aspect-oriented prolog in a language processing context},
	volume = {2},
	issn = {1751-8806},
	doi = {10.1049/iet-sen:20070064},
	abstract = {Language processors can be derived from logic grammars. That several concerns in the processor such as parsing, several kinds of analysis or transformations, can be specified as aspects of the logic grammar is demonstred. For that purpose, the authors bring the concepts of aspect-oriented programming to Prolog in a systematic way, based on established Prolog technology. The authors illustrate that typical Prolog programming techniques can be described as generic aspects and provided in a library to support reusable concerns. A domain-specific language ({DSL)} is developed to improve readability of aspect-oriented specifications.},
	number = {3},
	journal = {{IET} Software},
	author = {Lohmann, W. and Riedewald, G. and Wachsmuth, G.},
	month = jun,
	year = {2008},
	keywords = {aspect-oriented {PROLOG}, domain-specific language, grammars, language processing context, logic grammar, object-oriented programming, program compiler, program compilers, {PROLOG}, {PROLOG} programming techniques},
	pages = {241--259}
}

@incollection{alferes_event-condition-action_2006,
	series = {Lecture Notes in Computer Science},
	title = {An Event-Condition-Action Logic Programming Language},
	copyright = {©2006 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-39625-3, 978-3-540-39627-7},
	url = {http://link.springer.com/chapter/10.1007/11853886_5},
	abstract = {Event-Condition-Action ({ECA)} languages are an intuitive and powerful paradigm for programming reactive systems. Usually, important features for an {ECA} language are reactive and reasoning capabilities, the possibility to express complex actions and events, and a declarative semantics. In this paper, we introduce {ERA}, an {ECA} language based on, and extending the framework of logic programs updates that, together with these features, also exhibits capabilities to integrate external updates and perform self updates to its knowledge (data and classical rules) and behaviour (reactive rules).},
	number = {4160},
	urldate = {2014-04-25},
	booktitle = {Logics in Artificial Intelligence},
	publisher = {Springer Berlin Heidelberg},
	author = {Alferes, J. J. and Banti, F. and Brogi, A.},
	editor = {Fisher, Michael and Hoek, Wiebe van der and Konev, Boris and Lisitsa, Alexei},
	month = jan,
	year = {2006},
	keywords = {Artificial Intelligence (incl. Robotics), Mathematical Logic and Formal Languages, Programming Techniques},
	pages = {29--42},
	file = {Alferes et al. - 2006 - An Event-Condition-Action Logic Programming Langua.pdf:D:\Programmes\Zotero\storage\UWF7PNNR\Alferes et al. - 2006 - An Event-Condition-Action Logic Programming Langua.pdf:application/pdf;Snapshot:D:\Programmes\Zotero\storage\TVS3V6PD\11853886_5.html:text/html}
}

@article{haupt_contextj:_2011,
	title = {{ContextJ:} Context-oriented Programming with Java},
	shorttitle = {{ContextJ}},
	url = {http://prg.is.titech.ac.jp/members/masuhara/papers/jssst2009.pdf},
	urldate = {2014-04-28},
	author = {Haupt, Malte Appeltauer Robert Hirschfeld Michael and Masuhara, Hidehiko},
	year = {2011},
	file = {jssst2009.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/W535B8GH/jssst2009.pdf:application/pdf}
}

@inproceedings{clarke_how_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {How Should Context-escaping Closures Proceed?},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562113},
	doi = {10.1145/1562112.1562113},
	abstract = {Context-oriented programming treats execution context explicitly and provides means for context-dependent adaptation at runtime. This is achieved, for example, using dynamic layer activation and contextual dispatch, where the context consists of a layer environment of a stack of active layers. Layers can adapt existing behaviour using proceed to access earlier activated layers. A problem arises when a call to proceed is made from within a closure that escapes the layer environment in which it was defined. It is not clear how to interpret proceed when the closure is subsequently applied in a different environment, because the layers it implicitly refers to (such as the original layer and/or the remaining layers) may no longer be active. In this paper, we describe this problem in detail and present some approaches for dealing with it, though ultimately we leave the question open.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Clarke, Dave and Costanza, Pascal and Tanter, Éric},
	year = {2009},
	pages = {1:1–1:6},
	file = {Clarke et al. - 2009 - How Should Context-escaping Closures Proceed.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/5JTH4QXG/Clarke et al. - 2009 - How Should Context-escaping Closures Proceed.pdf:application/pdf}
}

@inproceedings{gonzalez_transactional_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Transactional Contexts: Harnessing the Power of Context-oriented Reflection},
	isbn = {978-1-60558-538-3},
	shorttitle = {Transactional Contexts},
	url = {http://doi.acm.org/10.1145/1562112.1562115},
	doi = {10.1145/1562112.1562115},
	abstract = {The emerging field of context-oriented programming gives a predominant role to the execution context of applications, and advocates the use of dedicated mechanisms to allow the elegant expression of behavioural adaptations to such context. With suitable reflective facilities, language semantics can be adapted to context by reusing the same context-oriented mechanisms that allow base-level adaptability. This kind of meta-level adaptability, in which the computation model itself becomes adaptable to context, gives rise to context-oriented computational reflection. To explore this idea, we set out to implement a simple software transactional memory system that exploits meta-level adaptability by regarding transactions as contexts, and adapting fundamental system behaviour to such transactional contexts. The implementation is succinct and non-intrusive, giving us an indication of the power lying at the crossroads of context-oriented programming and computational reflection.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {González, Sebastián and Denker, Marcus and Mens, Kim},
	year = {2009},
	keywords = {computational reflection, context-oriented programming, software transactional memory},
	pages = {3:1–3:6},
	file = {González et al. - 2009 - Transactional Contexts Harnessing the Power of Co.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/I68MRBTB/González et al. - 2009 - Transactional Contexts Harnessing the Power of Co.pdf:application/pdf}
}

@inproceedings{kamina_towards_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Towards Safe and Flexible Object Adaptation},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562116},
	doi = {10.1145/1562112.1562116},
	abstract = {In this paper, a programming language {NextEJ} is proposed. {NextEJ} is based on Epsilon model, which realizes object adaptation to contexts. The novelty of Epsilon model is its ability to make objects be able to freely enter or leave contexts dynamically and belong to multiple contexts at a time. However, such kind of flexibility also easily brings type-unsafety. {NextEJ} tackles this problem by introducing a new feature called context activation scope. Inside a context activation scope, it is assured that an object is always bound with the role activated so that no method-not-understood errors occur at run-time. Furthermore, context activation scope can be nested so that multiple contexts can be activated at a time. A role instance has a pre-defined field {thisContext} which refers to its enclosing context instance. In the case of multiple context activations, the reference of {thisContext} is interpreted as a composite context whose behavior is determined by the order of activations.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Kamina, Tetsuo and Tamai, Tetsuo},
	year = {2009},
	keywords = {epsilon, {NextEJ}, role model},
	pages = {4:1–4:6},
	file = {Kamina and Tamai - 2009 - Towards Safe and Flexible Object Adaptation.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/HZWXZZJT/Kamina and Tamai - 2009 - Towards Safe and Flexible Object Adaptation.pdf:application/pdf}
}

@inproceedings{bainomugisha_towards_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Towards Context-aware Propagators: Language Constructs for Context-aware Adaptation Dependencies},
	isbn = {978-1-60558-538-3},
	shorttitle = {Towards Context-aware Propagators},
	url = {http://doi.acm.org/10.1145/1562112.1562120},
	doi = {10.1145/1562112.1562120},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Bainomugisha, Engineer and De Meuter, Wolfgang and {D'Hondt}, Theo},
	year = {2009},
	keywords = {context-aware systems, context-oriented programming, context reasoning, dependencies, propagators},
	pages = {8:1–8:4},
	file = {Bainomugisha et al. - 2009 - Towards Context-aware Propagators Language Constr.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/NK6Z9DCI/Bainomugisha et al. - 2009 - Towards Context-aware Propagators Language Constr.pdf:application/pdf}
}

@inproceedings{sindico_model_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Model Driven Development of Context Aware Software Systems},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562119},
	doi = {10.1145/1562112.1562119},
	abstract = {This paper presents the first results of an ongoing work towards the realization of a model driven development framework for context awareness. Its core element consists of a domain specific modeling language called {CAMEL} (Context Awareness {ModEling} Language), and defined as a {UML} extension. {CAMEL} can be used to enrich a {UML} model of an application with elements related to contexts and context dependent behaviors. The resulting {UML+CAMEL} model is the starting point for model transformation aimed at generating executable code or other artifacts. {CAMEL} is implemented by an Eclipse plugin.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Sindico, Andrea and Grassi, Vincenzo},
	year = {2009},
	keywords = {context awareness, context oriented modeling, context oriented programming, {MDA}, modeling, {UML}},
	pages = {7:1–7:5},
	file = {Sindico and Grassi - 2009 - Model Driven Development of Context Aware Software.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/SK7E6PD4/Sindico and Grassi - 2009 - Model Driven Development of Context Aware Software.pdf:application/pdf}
}

@inproceedings{appeltauer_improving_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Improving the Development of Context-dependent Java Applications with {ContextJ}},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562117},
	doi = {10.1145/1562112.1562117},
	abstract = {Context-oriented programming languages ease the design and implementation of context-dependent applications. {ContextJ} is a context-oriented extension to the Java programming language. In this paper, we assess the applicability of {ContextJ} language abstractions for the development of a graphical user interface-based application. We present a text editor that has been implemented with {ContextJ} based on the Qt Jambi framework and discuss possible extensions to {ContextJ} to improve its applicability.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Appeltauer, Malte and Hirschfeld, Robert and Masuhara, Hidehiko},
	year = {2009},
	keywords = {behavioral variations, context-oriented programming, dynamic scoping, layer activation},
	pages = {5:1–5:5},
	file = {Appeltauer et al. - 2009 - Improving the Development of Context-dependent Jav.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/BZSDWIJ3/Appeltauer et al. - 2009 - Improving the Development of Context-dependent Jav.pdf:application/pdf}
}

@inproceedings{nunez_declarative_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Declarative Definition of Contexts with Polymorphic Events},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562114},
	doi = {10.1145/1562112.1562114},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Núñez, Angel and Noyé, Jacques and Gasiunas, Vaidas},
	year = {2009},
	pages = {2:1–2:6},
	file = {Núñez et al. - 2009 - Declarative Definition of Contexts with Polymorphi.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/NWWWETER/Núñez et al. - 2009 - Declarative Definition of Contexts with Polymorphi.pdf:application/pdf}
}

@inproceedings{jayaram_context-oriented_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {Context-oriented Programming with {EventJava}},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562121},
	doi = {10.1145/1562112.1562121},
	abstract = {Recent research on Distributed Event-based Systems ({DEBS)} has focussed on event correlation, which is the task of processing events to identify meaningful patterns of events in the event cloud. In {DEBS}, software components communicate by generating, disseminating and receiving event notifications, which reify and describe the event. Several parts of an event notification are context-sensitive, depending on where the software component producing the event is deployed, the communication infrastructure available for event dissemination etc. Event contexts may be added during the production of an event (e.g. by the runtime system executing the component) or during dissemination (by a middleware) and play an integral part in event correlation. Examples of contextual information include physical time, logical time, geographical coordinates, information about the source of events, digital signatures, etc. {EventJava} [7], an extension of Java with advanced support for event correlation, explicitly integrates the notion of event context, thereby allowing a programmer to customize the way in which events are ordered, propagated and correlated with other events. In this paper, we explain why contexts are indispensable to {DEBS}, present an overview of {EventJava} and illustrate the use of contexts through programming examples.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Jayaram, K. R. and Eugster, Patrick},
	year = {2009},
	keywords = {context-aware, event correlation, {EventJava}, events, streams},
	pages = {9:1–9:6},
	file = {Jayaram and Eugster - 2009 - Context-oriented Programming with EventJava.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/DCRE3SNJ/Jayaram and Eugster - 2009 - Context-oriented Programming with EventJava.pdf:application/pdf}
}

@inproceedings{clarke_semantics_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {A Semantics for Context-oriented Programming with Layers},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562122},
	doi = {10.1145/1562112.1562122},
	abstract = {Context-oriented programming ({COP)} is a new programming approach whereby the context in which expressions evaluate can be adapted as a program runs. {COP} provides a degree of flexibility beyond object-oriented programming, while arguably retaining more modularity and structure than aspect-oriented programming. Although many languages exploring the context-oriented approach exist, to our knowledge no formal type-sound dynamic semantics of these languages exists. We address this shortcoming by providing a concise syntax-based formal semantics for context-oriented programming with layers, as witnessed by {ContextL}, {ContextJ*}, and other languages. Our language is based on Featherweight Java extended with layers and scoped layer activation and deactivation. As layers may introduce methods not appearing in classes, we also give a static type system that ensures that no program gets stuck (i.e., there exists a binding for each dispatched method call).},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Clarke, Dave and Sergey, Ilya},
	year = {2009},
	pages = {10:1–10:6},
	file = {Clarke and Sergey - 2009 - A Semantics for Context-oriented Programming with .pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/BHZE29UP/Clarke and Sergey - 2009 - A Semantics for Context-oriented Programming with .pdf:application/pdf}
}

@inproceedings{appeltauer_comparison_2009,
	address = {New York, {NY}, {USA}},
	series = {{COP} '09},
	title = {A Comparison of Context-oriented Programming Languages},
	isbn = {978-1-60558-538-3},
	url = {http://doi.acm.org/10.1145/1562112.1562118},
	doi = {10.1145/1562112.1562118},
	abstract = {Context-oriented programming ({COP)} extensions have been implemented for several languages. Each concrete language design and implementation comes with different variations of the features of the {COP} paradigm. In this paper, we provide a comparison of eleven {COP} implementations, discuss their designs, and evaluate their performance.},
	urldate = {2014-04-25},
	booktitle = {International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Appeltauer, Malte and Hirschfeld, Robert and Haupt, Michael and Lincke, Jens and Perscheid, Michael},
	year = {2009},
	keywords = {context-oriented programming, language comparison},
	pages = {6:1–6:6},
	file = {Appeltauer et al. - 2009 - A Comparison of Context-oriented Programming Langu.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/DWMS4FIM/Appeltauer et al. - 2009 - A Comparison of Context-oriented Programming Langu.pdf:application/pdf}
}

@inproceedings{plaice_cartesian_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {The Cartesian Approach to Context},
	isbn = {978-1-4503-0531-0},
	url = {http://doi.acm.org/10.1145/1930021.1930024},
	doi = {10.1145/1930021.1930024},
	abstract = {We present a new approach for context-oriented programming in which the context is represented by a set of (dimension, value) pairs. This tuple parameterizes the environment, and it can be referred to either as a single entity or as a composed entity, parts of which can independently be accessed. The context is also an index into any programmable entity, in our model the hyperdatons, which are in turn, arbitrary-dimensional arrays of arbitrary extent. The context may have privileged dimensions and one such dimension is time, which has as well a physical interpretation. The importance of this dimension relies on the fact that its proper handling will allow the control of software evolution, of systems, and of system instances or views; partial changes or updates to specific parts of a system; and synchronous communications between heterogenous components or even systems. In fact, it is our tool to create synchronous Cartesian systems, essential for context-aware distributed systems. The implementation of a Cartesian distributed system may rely on the behavior of several subsystems, all running on an internal clock necessarily infinitely faster than the external one, since a bunch of tasks in a subsystem, corresponds to one tick of the system. These subsystems all run with respect to a shared context called an æther, which facilitates communication by broadcasting between systems at possibly different levels. The æther in this case is an active context.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Plaice, John and Mancilla, Blanca},
	year = {2010},
	keywords = {Cartesian programming, context-aware programming, multidimensional programming, {TransLucid}},
	pages = {3:1–3:6},
	file = {Plaice and Mancilla - 2010 - The Cartesian Approach to Context.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/ANGK2XC6/Plaice and Mancilla - 2010 - The Cartesian Approach to Context.pdf:application/pdf}
}

@inproceedings{kamina_designing_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {Designing Event-based Context Transition in Context-oriented Programming},
	isbn = {978-1-4503-0531-0},
	url = {http://doi.acm.org/10.1145/1930021.1930023},
	doi = {10.1145/1930021.1930023},
	abstract = {This paper proposes a new programming language {EventCJ.} Its design stems from our observation that, in many context-aware applications, context changes are triggered by external events. Thus, in addition to the current {COP} language mechanisms, namely the one to activate/deactivate layers in accordance with a flow of control in programs, and the one to dispatch method calls to partial methods on active layers, we propose a mechanism to declaratively switch contexts of the receiver of events. {EventCJ} can declare events that trigger context transitions, and context transition rules that define how each instance's context changes when it receives a specific event. After the transition, the instance acquires the context dependent behaviors provided by the activated context. Each event is declared in an {AspectJ-like} pointcut that specifies where the event is fired in the join points of the system. {EventCJ} separates the specification of when each context is activated and deactivated that may crosscut whole program in the existing {COP} languages. Furthermore, the declarative nature of the context transition rules help validation of some properties that the contexts should satisfy.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Kamina, Tetsuo and Aotani, Tomoyuki and Masuhara, Hidehiko},
	year = {2010},
	keywords = {{ContextJ}, context translation rules, {EventCJ}},
	pages = {2:1–2:6},
	file = {Kamina et al. - 2010 - Designing Event-based Context Transition in Contex.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/WC6MHB7H/Kamina et al. - 2010 - Designing Event-based Context Transition in Contex.pdf:application/pdf}
}

@inproceedings{ghezzi_context_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {Context Oriented Programming in Highly Concurrent Systems},
	isbn = {978-1-4503-0531-0},
	url = {http://doi.acm.org/10.1145/1930021.1930022},
	doi = {10.1145/1930021.1930022},
	abstract = {Context Oriented Programming ({COP)} allows modularization of programs according to the cross-cutting concern of contexts. Context depending features are grouped in layers which can be activated at run time by triggering the associated behavioral variations. {COP} extensions have been provided for different languages. However all of them enforce a thread, shared-memory based concurrency model. In this paper we discuss how the {COP} paradigm can be applied to message-based concurrent systems which support the agents paradigm. The discussion is supported by the case of {ContextErlang}, our {COP-inspired} contextual version of Erlang.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Ghezzi, Carlo and Pradella, Matteo and Salvaneschi, Guido},
	year = {2010},
	keywords = {context, context-oriented programming, Erlang, {OTP} platform, self-adaptive software},
	pages = {1:1–1:3},
	file = {Ghezzi et al. - 2010 - Context Oriented Programming in Highly Concurrent .pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/D8PHZQXR/Ghezzi et al. - 2010 - Context Oriented Programming in Highly Concurrent .pdf:application/pdf}
}

@inproceedings{wasty_contextlua:_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {{ContextLua:} Dynamic Behavioral Variations in Computer Games},
	isbn = {978-1-4503-0531-0},
	shorttitle = {{ContextLua}},
	url = {http://doi.acm.org/10.1145/1930021.1930026},
	doi = {10.1145/1930021.1930026},
	abstract = {Behavioral variations are central to modern computer games as they are making the gameplay a more interesting user experience. However, these variations significantly add to the implementation complexity. We discuss the domain of computer games with respect to dynamic behavioral variations and argue that context-oriented programming is of special interest for this domain. This motivates our extension to the dynamic scripting language Lua, which is frequently used in the development of computer games. Our newly provided programming constructs allow game developers to use layers for defining and activating variations of the basic gameplay.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Wasty, Benjamin Hosain and Semmo, Amir and Appeltauer, Malte and Steinert, Bastian and Hirschfeld, Robert},
	year = {2010},
	pages = {5:1–5:6},
	file = {Wasty et al. - 2010 - ContextLua Dynamic Behavioral Variations in Compu.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/RFC5BMTC/Wasty et al. - 2010 - ContextLua Dynamic Behavioral Variations in Compu.pdf:application/pdf}
}

@inproceedings{schippers_graph-based_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {A Graph-based Operational Semantics for Context-oriented Programming},
	isbn = {978-1-4503-0531-0},
	url = {http://doi.acm.org/10.1145/1930021.1930027},
	doi = {10.1145/1930021.1930027},
	abstract = {Context-oriented programming can be regarded as a technique aiming for an improved (multi-dimensional) separation of concerns ({MDSOC).} The {delMDSOC} (virtual) machine model describes a common target platform for a range of high-level {MDSOC} approaches. As it is based only on the well-known concepts of objects, messages and delegation, it provides a means to express the semantics of context-oriented programming using these same notions as well. An approach based on structured operational semantics ({SOS)} exists, but it has a number of drawbacks, including its implicit representation of program state and the lack of a simulation mechanism. In this paper we introduce a graph-based semantics for context-oriented programming built on top of a concurrent actor-based semantics of {delMDSOC.} The semantics consists of a number of graph rewrite rules which can be applied to sample graphs using the {AGG} tool. This allows for the visual simulation of context-oriented programs, which we demonstrate by means of an example.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Schippers, Hans and Molderez, Tim and Janssens, Dirk},
	year = {2010},
	pages = {6:1–6:6},
	file = {Schippers et al. - 2010 - A Graph-based Operational Semantics for Context-or.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/4SHXHBGZ/Schippers et al. - 2010 - A Graph-based Operational Semantics for Context-or.pdf:application/pdf}
}

@inproceedings{appeltauer_layered_2010,
	address = {New York, {NY}, {USA}},
	series = {{COP} '10},
	title = {Layered Method Dispatch with {INVOKEDYNAMIC:} An Implementation Study},
	isbn = {978-1-4503-0531-0},
	shorttitle = {Layered Method Dispatch with {INVOKEDYNAMIC}},
	url = {http://doi.acm.org/10.1145/1930021.1930025},
	doi = {10.1145/1930021.1930025},
	abstract = {This paper describes an implementation study in which we use the upcoming {INVOKEDYNAMIC} bytecode instruction---to be supported by the standard Java virtual machine starting with the release of Java 7---to implement layered method dispatch. We compare the resulting implementation approach with that of the existing {JCop} compiler, and present preliminary results of comparative benchmarks. In spite of the as of now not optimized {INVOKEDYAMIC} implementation in the Java virtual machine, performance characteristics of the {INVOKEDYNAMIC-based} {JCop} implementation are promising.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the {2Nd} International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Appeltauer, Malte and Haupt, Michael and Hirschfeld, Robert},
	year = {2010},
	pages = {4:1–4:6},
	file = {Appeltauer et al. - 2010 - Layered Method Dispatch with INVOKEDYNAMIC An Imp.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/6UXZQ36Q/Appeltauer et al. - 2010 - Layered Method Dispatch with INVOKEDYNAMIC An Imp.pdf:application/pdf}
}

@inproceedings{cardozo_safer_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {Safer Context ({De)Activation:} Through the Prompt-loyal Strategy},
	isbn = {978-1-4503-0891-5},
	shorttitle = {Safer Context ({De)Activation}},
	url = {http://doi.acm.org/10.1145/2068736.2068738},
	doi = {10.1145/2068736.2068738},
	abstract = {Context-oriented programming languages provide language abstractions for the dynamic activation and deactivation of behavioral adaptations, based on the system's context of execution. As contexts are freely activated and deactivated, their associated behavior adaptations are added and removed to and from the system, which may break its consistency with respect to other available adaptations. To manage consistency between adaptations this paper introduces a model for the safe activation and deactivation of contexts. The model consists of two approaches, prompt-loyal for a delayed context (de)activation, and prompt for an immediate context (de)activation.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Cardozo, Nicolás and González, Sebastián and Mens, Kim and {D'Hondt}, Theo},
	year = {2011},
	keywords = {behavior adaptation, consistency management, context-oriented programming},
	pages = {2:1–2:6},
	file = {Cardozo et al. - 2011 - Safer Context (De)Activation Through the Prompt-l.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/AQEW7UP7/Cardozo et al. - 2011 - Safer Context (De)Activation Through the Prompt-l.pdf:application/pdf}
}

@inproceedings{rho_context_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {A Context Management Infrastructure with Language Integration Support},
	isbn = {978-1-4503-0891-5},
	url = {http://doi.acm.org/10.1145/2068736.2068739},
	doi = {10.1145/2068736.2068739},
	abstract = {A range of context-management systems in the past have motivated the need for development support of context-aware applications. They typically provide {APIs} and query languages for context analysis. Reacting to context changes, however, is either not at all or only to a limited extend supported by adhering to constraints of a framework. In this paper, we present a context-management system that combines context reasoning with context-dependent behavior by taking advantage of language approaches to dynamic adaptation, such as aspect- and context-oriented programming. Our framework is open for different levels of integration with programming language extensions and offers a dynamic, strategy-based aggregation of local and distributed context sources. As a first step, we implemented a query library for the {JCop} language. We present its {API} and show the implementation of an example application.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Rho, Tobias and Appeltauer, Malte and Lerche, Stephan and Cremers, Armin B. and Hirschfeld, Robert},
	year = {2011},
	keywords = {context-awareness, context-management, context-oriented programming, infrastucture, query language, semantic web},
	pages = {3:1–3:6},
	file = {Rho et al. - 2011 - A Context Management Infrastructure with Language .pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/UHAK6GIH/Rho et al. - 2011 - A Context Management Infrastructure with Language .pdf:application/pdf}
}

@inproceedings{uchio_cjadviser:_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {{CJAdviser:} {SMT-based} Debugging Support for {ContextJ}},
	isbn = {978-1-4503-0891-5},
	shorttitle = {{CJAdviser}},
	url = {http://doi.acm.org/10.1145/2068736.2068743},
	doi = {10.1145/2068736.2068743},
	abstract = {Context-awareness plays an important role in developing flexible and adaptive software. However, it is not easy to write context-aware programs because context cannot be treated as a module in the traditional programming languages. {COP} (Context-Oriented Programming) languages such as {ContextJ*} enable programmers to describe the context-aware behavior elegantly. The primary system behavior can be separated from the context-aware behavior. On the other hand, unfortunately, it becomes difficult to debug the programs due to the complexity of {COP} execution and the dependence between objects and contexts. To deal with this problem, this paper proposes {CJAdviser}, {SMT-based} debugging support for {ContextJ*.} In {CJAdviser}, the execution trace of a {ContextJ*} program is converted to a context dependence graph that can be analyzed by the {SMT} (Satisfiability Modulo Theories) solver Yices. Using {CJAdviser}, we can check a variety of object-context dependencies such as {"Do} two objects A and B exist in the Context X at the same time?". In {CJAdviser}, {SMT} is applied to not static analysis but dynamic analysis because many context-aware properties are determined at run time.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Uchio, Shizuka and Ubayashi, Naoyasu and Kamei, Yasutaka},
	year = {2011},
	keywords = {{COP}, {SMT}, trace analysis},
	pages = {7:1–7:6},
	file = {Uchio et al. - 2011 - CJAdviser SMT-based Debugging Support for Context.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/78ARQ28V/Uchio et al. - 2011 - CJAdviser SMT-based Debugging Support for Context.pdf:application/pdf}
}

@inproceedings{aotani_featherweight_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {Featherweight {EventCJ:} A Core Calculus for a Context-oriented Language with Event-based Per-instance Layer Transition},
	isbn = {978-1-4503-0891-5},
	shorttitle = {Featherweight {EventCJ}},
	url = {http://doi.acm.org/10.1145/2068736.2068737},
	doi = {10.1145/2068736.2068737},
	abstract = {We propose Featherweight {EventCJ}, which is a small calculus for context-oriented languages with event-based per-instance layer controls like {EventCJ.} It extends {ContextFJ} with stores, labels and transitions for modeling the per-instance layer management, events and declarative layer transition rules, respectively.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Aotani, Tomoyuki and Kamina, Tetsuo and Masuhara, Hidehiko},
	year = {2011},
	keywords = {context-oriented programming, {EventCJ}, layer transition},
	pages = {1:1–1:7},
	file = {Aotani et al. - 2011 - Featherweight EventCJ A Core Calculus for a Conte.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/U58F4G98/Aotani et al. - 2011 - Featherweight EventCJ A Core Calculus for a Conte.pdf:application/pdf}
}

@inproceedings{lincke_implementing_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {Implementing Scoped Method Tracing with {ContextJS}},
	isbn = {978-1-4503-0891-5},
	url = {http://doi.acm.org/10.1145/2068736.2068742},
	doi = {10.1145/2068736.2068742},
	abstract = {Customized method tracers can be a valuable tool for debugging and program comprehension. They allow to declaratively specify what parts of the call graph should be captured and are an alternative to tedious manual debugging techniques. Method tracers are easy to implement in dynamic languages but avoiding multiple method instrumentation and recursion in the client code can become complex. In this paper we show how Context-oriented Programming ({COP)} can be leveraged to address such issues. Our approach is based on {ContextJS}, a {COP} implementation for {JavaScript}, which provides scoping mechanisms and an infrastructure for method instrumentation. These abstractions allow to separate target and tracer logic so that self-referentiality is avoided.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Lincke, Jens and Krahn, Robert and Hirschfeld, Robert},
	year = {2011},
	pages = {6:1–6:6},
	file = {Lincke et al. - 2011 - Implementing Scoped Method Tracing with ContextJS.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/T6A5I3NV/Lincke et al. - 2011 - Implementing Scoped Method Tracing with ContextJS.pdf:application/pdf}
}

@inproceedings{schuster_context-oriented_2011,
	address = {New York, {NY}, {USA}},
	series = {{COP} '11},
	title = {Context-oriented Programming for Mobile Devices: {JCop} on Android},
	isbn = {978-1-4503-0891-5},
	shorttitle = {Context-oriented Programming for Mobile Devices},
	url = {http://doi.acm.org/10.1145/2068736.2068741},
	doi = {10.1145/2068736.2068741},
	abstract = {The behavior of mobile applications is particularly affected by their execution context, such as location and state a the mobile device. Among other approaches, context-oriented programming can help to achieve context-dependent behavior without sacrificing modularity or adhering to a certain framework or library by enabling fine-grained adaptation of default behavior per control-flow. However, context information relevant for mobile applications is mostly defined by external events and sensor data rather than by code and control flow. To accommodate this, the {JCop} language provides a more declarative approach by pointcut-like adaptation rules. In this paper, we explain how we applied {JCop} to the development of Android applications for which we extended the language semantics for static contexts and modified the compiler. Additionally, we outline the successful implementation of a simple, proof-of-concept mobile application using our approach and report on promising early evaluation results.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 3rd International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Schuster, Christopher and Appeltauer, Malte and Hirschfeld, Robert},
	year = {2011},
	keywords = {context-oriented programming, dynamic adaption, mobile applications},
	pages = {5:1–5:5},
	file = {Schuster et al. - 2011 - Context-oriented Programming for Mobile Devices J.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/55S2RHF7/Schuster et al. - 2011 - Context-oriented Programming for Mobile Devices J.pdf:application/pdf}
}

@inproceedings{kamina_bridging_2012,
	address = {New York, {NY}, {USA}},
	series = {{COP} '12},
	title = {Bridging Real-world Contexts and Units of Behavioral Variations by Composite Layers},
	isbn = {978-1-4503-1276-9},
	url = {http://doi.acm.org/10.1145/2307436.2307440},
	doi = {10.1145/2307436.2307440},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Kamina, Tetsuo and Aotani, Tomoyuki and Masuhara, Hidehiko},
	year = {2012},
	keywords = {atomic and composite layers, {EventCJ}, implicit layer activation},
	pages = {4:1–4:6},
	file = {Kamina et al. - 2012 - Bridging Real-world Contexts and Units of Behavior.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/ANFWHVF7/Kamina et al. - 2012 - Bridging Real-world Contexts and Units of Behavior.pdf:application/pdf}
}

@inproceedings{appeltauer_declarative_2012,
	address = {New York, {NY}, {USA}},
	series = {{COP} '12},
	title = {Declarative Layer Composition in Framework-based Environments},
	isbn = {978-1-4503-1276-9},
	url = {http://doi.acm.org/10.1145/2307436.2307437},
	doi = {10.1145/2307436.2307437},
	abstract = {Context-oriented programming ({COP)} can improve modularity by dedicated language constructs for crosscutting concerns. Although {COP} could be used in any application domain in general, its current implementations may require adaptations of source code that is not accessible to the developer. This, in turn, limits the interaction of adaptation mechanisms provided by {COP} language extensions with widely used programming abstractions such as frameworks. As a result, dynamic control over layers emerges as a crosscutting concern that obstructs the separation of concerns. In this paper, we discuss crosscutting layer composition in framework-based applications in detail. As a concrete example of such a framework-based application, we present a simple action adventure game that we implemented using a conventional {COP} language. Finally, we show, how our {JCop} language supports the modularization of these crosscutting concerns by language constructs for declarative layer composition.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Appeltauer, Malte and Hirschfeld, Robert},
	year = {2012},
	keywords = {context-oriented programming, dynamic adaption, framework, Java},
	pages = {1:1–1:6},
	file = {Appeltauer and Hirschfeld - 2012 - Declarative Layer Composition in Framework-based E.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/4NJPJU6Q/Appeltauer and Hirschfeld - 2012 - Declarative Layer Composition in Framework-based E.pdf:application/pdf}
}

@inproceedings{castro_dynamicschema:_2012,
	address = {New York, {NY}, {USA}},
	series = {{COP} '12},
	title = {{DynamicSchema:} A Lightweight Persistency Framework for Context-oriented Data Management},
	isbn = {978-1-4503-1276-9},
	shorttitle = {{DynamicSchema}},
	url = {http://doi.acm.org/10.1145/2307436.2307441},
	doi = {10.1145/2307436.2307441},
	abstract = {While context-oriented programming technology so far has focused mostly on behavioral adaptation, context-oriented data management has received much less attention. In this paper we make a case for the problem of context-oriented data management, using a concrete example of a mobile application. We illustrate some of the issues involved and propose a lightweight persistency framework, called {DynamicSchema}, that resolves some of these issues. The solution consists in a flexible reification of the database schema, as a convenient dynamic data structure that can be adapted at execution time, according to sensed context changes. Implementing our mobile application using this framework enabled us to reduce the complexity of the domain modeling layer, to facilitate the production of code with low memory footprint, and to simplify the implementation of certain scenarios related to context-dependent security concerns.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Castro, Sergio and González, Sebastián and Mens, Kim and Denker, Marcus},
	year = {2012},
	keywords = {context-oriented data management, data access layer, dynamic adaptability, persistency},
	pages = {5:1–5:6},
	file = {Castro et al. - 2012 - DynamicSchema A Lightweight Persistency Framework.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/AZ52MKTG/Castro et al. - 2012 - DynamicSchema A Lightweight Persistency Framework.pdf:application/pdf}
}

@inproceedings{lincke_scoping_2012,
	address = {New York, {NY}, {USA}},
	series = {{COP} '12},
	title = {Scoping Changes in Self-supporting Development Environments Using Context-oriented Programming},
	isbn = {978-1-4503-1276-9},
	url = {http://doi.acm.org/10.1145/2307436.2307438},
	doi = {10.1145/2307436.2307438},
	abstract = {Interactive development in self-supporting systems like Smalltalk or the Lively Kernel allows for an explorative and direct development workflow. Because of the immediate and direct feedback loops, changes to core behavior can lead to accidentally breaking the programming tools themselves. By separating the tools from the objects they work on, this fatal self referentiality can be avoided, but at the expense of interactive development. In this paper we show how context-oriented programming ({COP)} can be used to separate tools from the objects under development. Instead of directly modifying meta-structures, changes should go into layers on top of these structures. Since layers can be scoped at run-time, changes do not affect the programming tools. We demonstrate this approach by showing examples of adapting core behavior in our self-supporting development environment Webwerkstatt with Context {JS}, our {COP} extension for {JavaScript.}},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Lincke, Jens and Hirschfeld, Robert},
	year = {2012},
	pages = {2:1–2:6},
	file = {Lincke and Hirschfeld - 2012 - Scoping Changes in Self-supporting Development Env.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/DXJSVFJE/Lincke and Hirschfeld - 2012 - Scoping Changes in Self-supporting Development Env.pdf:application/pdf}
}

@inproceedings{cardozo_uniting_2012,
	address = {New York, {NY}, {USA}},
	series = {{COP} '12},
	title = {Uniting Global and Local Context Behavior with Context Petri Nets},
	isbn = {978-1-4503-1276-9},
	url = {http://doi.acm.org/10.1145/2307436.2307439},
	doi = {10.1145/2307436.2307439},
	abstract = {Context-oriented programming enables adaptation of systems to their execution environment. Behavioral adaptations are defined in the system and then associated to a context. Such adaptations are made available at runtime when their context is deemed more appropriate by the execution environment. Context activation is reified using two techniques. Global to all running threads in the system, or local to a particular thread of execution. Providing one technique or the other may hinder the adaptable capabilities of the system. This paper extends the context Petri nets model to unify global and local context behavior. Global and local context behavior are represented as multicolored tokens in context Petri nets, by assigning a color to each thread in the system. By means of context Petri nets, context-oriented systems can unambiguously adapt their behavior globally, or to a particular thread of execution.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Cardozo, Nicolás and González, Sebastián and Mens, Kim and {D'Hondt}, Theo},
	year = {2012},
	keywords = {behavioral adaptations, consistency management, context-oriented programming, Petri nets},
	pages = {3:1–3:6},
	file = {Cardozo et al. - 2012 - Uniting Global and Local Context Behavior with Con.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/FVRMZD35/Cardozo et al. - 2012 - Uniting Global and Local Context Behavior with Con.pdf:application/pdf}
}

@inproceedings{kamina_unified_2013,
	address = {New York, {NY}, {USA}},
	series = {{COP'13}},
	title = {A Unified Context Activation Mechanism},
	isbn = {978-1-4503-2040-5},
	url = {http://doi.acm.org/10.1145/2489793.2489795},
	doi = {10.1145/2489793.2489795},
	abstract = {With the increase of research interest in context-oriented programming ({COP)}, several {COP} languages with different characteristics have been proposed. Although they share common language features to modularize context-dependent variations of behavior, they take quite different ways to realize them. Because of such differences, each language cannot solely cover all use cases of implementing context-dependent behavioral variations. In this paper, we propose a new {COP} language Javanese that unifies several {COP} mechanisms into general linguistic constructs. Specifically, it provides context declarations to identify context and its specification of the range of execution sequences where this context is active, activate declarations to define the relation between contexts and layers, and context group declarations that modularize these declarations and specify the set of instances where they are applied. This paper describes design of Javanese and an implementation strategy.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 5th International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Kamina, Tetsuo and Aotani, Tomoyuki and Masuhara, Hidehiko},
	year = {2013},
	keywords = {composite layers, context-oriented programming, {EventCJ}, layer activation},
	pages = {2:1–2:6},
	file = {Kamina et al. - 2013 - A Unified Context Activation Mechanism.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/8BGJ4RUJ/Kamina et al. - 2013 - A Unified Context Activation Mechanism.pdf:application/pdf}
}

@inproceedings{adams_enterprise_2013,
	address = {New York, {NY}, {USA}},
	series = {{COP'13}},
	title = {Enterprise Context: A Rich Source of Requirements for Context-oriented Programming},
	isbn = {978-1-4503-2040-5},
	shorttitle = {Enterprise Context},
	url = {http://doi.acm.org/10.1145/2489793.2489796},
	doi = {10.1145/2489793.2489796},
	abstract = {We introduce the domain of enterprise context, as opposed to personal or execution context, and we present requirements for context-oriented programming technology arising out of this broader notion of context. We illustrate enterprise context with scenarios in which data from across an enterprise, as well as data from outside an enterprise, are all brought to bear as context in any situation where they are relevant and can factor into making better decisions and achieving better outcomes. We suggest enterprise context as a rich source of requirements for context-oriented programming models, languages, and virtual machines. In particular, we raise issues such as scale, integration, relevance, temporality, protection, privacy, provenance, policy in general, and valuation. And, for this workshop, we propose enterprise context as one perspective for discussion of new language and {VM} features: How do proposed features support such a domain?},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 5th International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Adams, Sam and Bhattacharya, Suparna and Friedlander, Bob and Gerken, John and Kimelman, Doug and Kraemer, Jim and Ossher, Harold and Richards, John and Ungar, David and Wegman, Mark},
	year = {2013},
	pages = {3:1–3:7},
	file = {Adams et al. - 2013 - Enterprise Context A Rich Source of Requirements .pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/KR3HRVZC/Adams et al. - 2013 - Enterprise Context A Rich Source of Requirements .pdf:application/pdf}
}

@inproceedings{hirschfeld_l:_2013,
	address = {New York, {NY}, {USA}},
	series = {{COP'13}},
	title = {L: Context-oriented Programming with Only Layers},
	isbn = {978-1-4503-2040-5},
	shorttitle = {L},
	url = {http://doi.acm.org/10.1145/2489793.2489797},
	doi = {10.1145/2489793.2489797},
	abstract = {Most if not all extensions to object-oriented languages that allow for context-oriented programming ({COP)} are asymmetric in the sense that they assume a base implementation of a system to be composed into classes and a set of layers to provide behavioral variations applied to those classes at run-time. We propose L as an experimental language to further explore the design space for {COP} languages. In this position paper we talk about first steps towards the unification of classes and layers and with that the removal of the asymmetry in composition mechanisms of contemporary {COP} implementations.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 5th International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Hirschfeld, Robert and Masuhara, Hidehiko and Igarashi, Atsushi},
	year = {2013},
	keywords = {context-oriented programming, layers, modularity, sideways composition, software composition},
	pages = {4:1–4:5},
	file = {Hirschfeld et al. - 2013 - L Context-oriented Programming with Only Layers.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/MZVX73Z9/Hirschfeld et al. - 2013 - L Context-oriented Programming with Only Layers.pdf:application/pdf}
}

@inproceedings{ubayashi_archface4cop:_2013,
	address = {New York, {NY}, {USA}},
	series = {{COP'13}},
	title = {{Archface4COP:} Architectural Interface for Context-oriented Programming},
	isbn = {978-1-4503-2040-5},
	shorttitle = {{Archface4COP}},
	url = {http://doi.acm.org/10.1145/2489793.2489794},
	doi = {10.1145/2489793.2489794},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the 5th International Workshop on Context-Oriented Programming},
	publisher = {{ACM}},
	author = {Ubayashi, Naoyasu and Di, Ai and Kamei, Yasutaka},
	year = {2013},
	keywords = {architecture, context-oriented programming, interface},
	pages = {1:1–1:6},
	file = {Ubayashi et al. - 2013 - Archface4COP Architectural Interface for Context-.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/AP559V7H/Ubayashi et al. - 2013 - Archface4COP Architectural Interface for Context-.pdf:application/pdf}
}

@article{bettini_survey_2010,
	series = {Context Modelling, Reasoning and Management},
	title = {A survey of context modelling and reasoning techniques},
	volume = {6},
	issn = {1574-1192},
	url = {http://www.sciencedirect.com/science/article/pii/S1574119209000510},
	doi = {10.1016/j.pmcj.2009.06.002},
	abstract = {Development of context-aware applications is inherently complex. These applications adapt to changing context information: physical context, computational context, and user context/tasks. Context information is gathered from a variety of sources that differ in the quality of information they produce and that are often failure prone. The pervasive computing community increasingly understands that developing context-aware applications should be supported by adequate context information modelling and reasoning techniques. These techniques reduce the complexity of context-aware applications and improve their maintainability and evolvability. In this paper we discuss the requirements that context modelling and reasoning techniques should meet, including the modelling of a variety of context information types and their relationships, of high-level context abstractions describing real world situations using context information facts, of histories of context information, and of uncertainty of context information. This discussion is followed by a description and comparison of current context modelling and reasoning techniques and a lesson learned from this comparison.},
	number = {2},
	urldate = {2014-04-25},
	journal = {Pervasive and Mobile Computing},
	author = {Bettini, Claudio and Brdiczka, Oliver and Henricksen, Karen and Indulska, Jadwiga and Nicklas, Daniela and Ranganathan, Anand and Riboni, Daniele},
	month = apr,
	year = {2010},
	keywords = {Context management, Context modelling, context reasoning, Quality of context, Situation modelling},
	pages = {161--180},
	file = {Bettini et al. - 2010 - A Survey of Context Modelling and Reasoning Techni.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/US9HMSM5/Bettini et al. - 2010 - A Survey of Context Modelling and Reasoning Techni.pdf:application/pdf;ScienceDirect Snapshot:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/UF6TSD5H/S1574119209000510.html:text/html}
}

@inproceedings{appeltauer_dedicated_2008,
	title = {Dedicated Programming Support for Context-Aware Ubiquitous Applications},
	doi = {10.1109/UBICOMM.2008.56},
	abstract = {Ubiquitous mobile applications often require dynamic context information for user-specific computation. However, state-of-the-art platforms, frameworks, and programming languages used for developing such applications do not directly support context-dependent behavior with first class entities. Instead, context-aware functionality is tangled with the application's core concerns, which increases complexity, and hinders separation of concerns and further software evolution. This paper motivates Context-oriented Programming ({COP)} for ubiquitous computing. It presents an overview of our {COP} extension to the Java programming language and a scenario of a context-oriented mobile application.},
	booktitle = {The Second International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies, 2008. {UBICOMM} '08},
	author = {Appeltauer, M. and Hirschfeld, R. and Rho, T.},
	month = sep,
	year = {2008},
	keywords = {Application software, Blood pressure, Computer languages, context-awareness, Context-aware services, context-aware ubiquitous applications, context-oriented programming, {COP}, dedicated programming support, Dynamic programming, Heart beat, Java, Java programming language, mobile computing, Pervasive computing, separation of concerns, ubiquitous computing, ubiquitous mobile applications, user-specific computation},
	pages = {38--43},
	file = {Appeltauer et al. - 2008 - Dedicated Programming Support for Context-Aware Ub.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/UDXJ44MJ/Appeltauer et al. - 2008 - Dedicated Programming Support for Context-Aware Ub.pdf:application/pdf;IEEE Xplore Abstract Record:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/4RMKSUKP/articleDetails.html:text/html}
}

@article{appeltauer_declarative_2013,
	title = {Declarative Layer Composition with The {JCop} Programming Language.},
	volume = {12},
	issn = {1660-1769},
	url = {http://www.jot.fm/contents/issue_2013_06/article4.html},
	doi = {10.5381/jot.2013.12.2.a4},
	language = {en},
	number = {2},
	urldate = {2014-04-25},
	journal = {The Journal of Object Technology},
	author = {Appeltauer, Malte and Hirschfeld, Robert and Lincke, Jens},
	year = {2013},
	pages = {4:1},
	file = {Appeltauer et al. - 2013 - Declarative Layer Composition with The JCop Progra.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/Q7BR9TXA/Appeltauer et al. - 2013 - Declarative Layer Composition with The JCop Progra.pdf:application/pdf;JOT — Contents:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/EKN3X92Z/article4.html:text/html}
}

@inproceedings{kamina_eventcj:_2011,
	address = {New York, {NY}, {USA}},
	series = {{AOSD} '11},
	title = {{EventCJ:} A Context-oriented Programming Language with Declarative Event-based Context Transition},
	isbn = {978-1-4503-0605-8},
	shorttitle = {{EventCJ}},
	url = {http://doi.acm.org/10.1145/1960275.1960305},
	doi = {10.1145/1960275.1960305},
	abstract = {This paper proposes {EventCJ}, a context-oriented programming ({COP)} language that can modularly control layer activation based on user-defined events. In addition to defining context-specific behaviors by using existing {COP} constructs, the {EventCJ} programmer declares events to specify when and on which instance layer switching should happen, and layer transition rules to specify which layers should be activated/deactivated upon events. These constructs enable controlling layer activation on a per-instance basis, separately from a base program. We also demonstrate an approach to verify safety properties of layer transitions by using a model checker. With these advantages, {EventCJ} enables more modular descriptions of context-aware programs, especially when layer switching is triggered in many places of a program, or by activities external to the base program. We implemented a prototype {EventCJ} compiler with Eclipse {IDE} support.},
	urldate = {2014-04-25},
	booktitle = {Proceedings of the Tenth International Conference on Aspect-oriented Software Development},
	publisher = {{ACM}},
	author = {Kamina, Tetsuo and Aotani, Tomoyuki and Masuhara, Hidehiko},
	year = {2011},
	keywords = {context-oriented programming, instance-specific layer activation, verification},
	pages = {253–264},
	file = {Kamina et al. - 2011 - EventCJ A Context-oriented Programming Language w.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/Z2W3MBE2/Kamina et al. - 2011 - EventCJ A Context-oriented Programming Language w.pdf:application/pdf}
}

@inproceedings{ponge_golo_2013,
	title = {Golo, a dynamic, light and efficient language for post-invokedynamic {JVM}},
	isbn = {9781450321112},
	url = {http://dl.acm.org/citation.cfm?doid=2500828.2500844},
	doi = {10.1145/2500828.2500844},
	language = {en},
	urldate = {2014-04-30},
	publisher = {{ACM} Press},
	author = {Ponge, Julien and Le Mouël, Frédéric and Stouls, Nicolas},
	year = {2013},
	pages = {153},
	file = {Golo- a Dynamic, Light and Efﬁcient-JPO-FLM.pdf:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/NZPIRTJ8/Golo- a Dynamic, Light and Efﬁcient-JPO-FLM.pdf:application/pdf}
}


@article{lincke_open_2011,
	series = {Special Issue on Software Evolution, Adaptability and Variability},
	title = {An open implementation for context-oriented layer composition in {ContextJS}},
	volume = {76},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/S0167642310002121},
	doi = {10.1016/j.scico.2010.11.013},
	abstract = {Context-oriented programming ({COP)} provides dedicated support for defining and composing variations to a basic program behavior. A variation, which is defined within a layer, can be de-/activated for the dynamic extent of a code block. While this mechanism allows for control flow-specific scoping, expressing behavior adaptations can demand alternative scopes. For instance, adaptations can depend on dynamic object structure rather than control flow. We present scenarios for behavior adaptation and identify the need for new scoping mechanisms. The increasing number of scoping mechanisms calls for new language abstractions representing them. We suggest to open the implementation of scoping mechanisms so that developers can extend the {COP} language core according to their specific needs. Our open implementation moves layer composition into objects to be affected and with that closer to the method dispatch to be changed. We discuss the implementation of established {COP} scoping mechanisms using our approach and present new scoping mechanisms developed for our enhancements to Lively Kernel.},
	number = {12},
	urldate = {2014-04-30},
	journal = {Science of Computer Programming},
	author = {Lincke, Jens and Appeltauer, Malte and Steinert, Bastian and Hirschfeld, Robert},
	month = dec,
	year = {2011},
	keywords = {{ContextJS}, context-oriented programming, Dynamic adaptation, Open implementations, Scope},
	pages = {1194--1209},
	file = {ScienceDirect Snapshot:/home/baptiste/.zotero/zotero/8zlhxocn.default/zotero/storage/CRKA2I4J/S0167642310002121.html:text/html}
}
